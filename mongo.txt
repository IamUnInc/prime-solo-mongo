//1. Create a collection named orders.
      db.createCollection('orders')

//2. Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields.
      orders.insert({orderDate: new Date('August 28, 2016'), orderTotal: 250.00, lineItems: [{unitPrice: 125.00, quantity: 2, productName: "Bars"}]})
      orders.insert({orderDate: new Date('August 27, 2016'), orderTotal: 50.00, lineItems: [{unitPrice: 10.00, quantity: 5, productName: "Chain"}]})
      orders.insert({orderDate: new Date('August 29, 2016'), orderTotal: 25.00, lineItems: [{unitPrice: 25.00, quantity: 1, productName: "Crank"}]})

//3. Find a single order document, any order document.
      db.orders.findOne()

//4. Find all orders and make them look pretty.
      db.orders.find().pretty()

//5. Find all orders with an orderDate that is prior to 1/1/2016.
      db.orders.find({  'orderDate': { $lte: ISODate("2016-01-01T00:00:00Z") }})

//6. Find all orders with an orderDate that is after 1/1/2016.
      db.orders.find({  'orderDate': { $gte: ISODate("2016-01-01T00:00:00Z") }})

//7. Find orders with lineItems that have a quantity that is less than 50, but greater than 5. HINT: Look at $and and dot notation.
      db.orders.find( { lineItems: { $elemMatch: { unitPrice: { $gt: 5, $lt: 50 } } } } )

//8. Update one of your line items to 42.99. HINT: Look at dot notation
      db.orders.update({orderTotal : 25 , "lineItems.quantity": 1} , { $set: {"lineItems.$.unitPrice": 42.99}})

//9. Remove one of your orders.
      db.orders.remove({orderTotal: 50  })
